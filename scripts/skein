#!/usr/bin/python

import os
import sys
import time
import shutil
import argparse
import subprocess

# import the rpm parsing stuff
import rpm

from skein.pyskein import *

def main():

    ps = PySkein()

    p = argparse.ArgumentParser(
            description=u"Imports all src.rpms into git and lookaside cache",
        )

    sp = p.add_subparsers()

#    p_upload = sp.add_parser("sources", help=u"upload an srpm archive")
#    p_upload.add_argument('srpm', help=u"path to archive")
#    p_upload.add_argument('--new', action="store_true", help=u"new sources will replace old source")
#    p_upload.set_defaults(func=ps.do_sources)

    p_import = sp.add_parser("import", help=u"import srpm(s)")
    p_import.add_argument("path", nargs='+', help=u"path(s) to srpm. If dir given, will import all srpms")
    p_import.add_argument('--no-upload', action='store_true', help=u"If set, sources will not be uploaded to lookaside cache")
    p_import.add_argument('--no-push', action='store_true', help=u"If set, nothing will be committed or pushed to the remote")
    #p_import.add_argument("path", help=u"path to srpm. If dir given, will import all srpms")
    p_import.set_defaults(func=ps.do_import)

    p_deplist = sp.add_parser("deplist", help=u"return dependencies to build srpm")
    #p_import.add_argument("path", nargs='+', help=u"path to srpm. If dir given, will import all srpms")
    p_deplist.add_argument("path", help=u"path to srpm. If dir given, will import all srpms")
    p_deplist.set_defaults(func=ps.list_deps)

    p_request = sp.add_parser("request", help=u"import srpm(s)")
    p_request.add_argument("name", help=u"name of repository being requsted.")
    p_request.add_argument("-r", "--reason", help="Include reason with request")
    p_request.set_defaults(func=ps.request_gh_repo)

    p_build = sp.add_parser("build", help=u"build an already imported package")
    p_build.add_argument("target", help=u"tag applied to successful build")
    p_build.add_argument("name", help=u"name of the package")
    p_build.add_argument("-c", "--config", metavar='config', help=u"alternate path to koji config file")
    p_build.set_defaults(func=ps.do_build_pkg)


    args = p.parse_args()
#    print "Args: %s" % str(args)

    try:
        args.func(args)
    except SkeinError, e:
        print e.value
        sys.exit(1)

if __name__ == "__main__":
    raise SystemExit(main())
